/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   creat_thread.c                                     :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: abdelhamid <abdelhamid@student.42.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/07/16 14:47:12 by abdelhamid        #+#    #+#             */
/*   Updated: 2025/07/20 13:09:50 by abdelhamid       ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

void	ft_usleep(size_t time, t_data *data)
{
	size_t	start;

	start = get_current_time();
	while ((get_current_time() - start) < time)
	{
		if (data->someone_died)
			return ;
		usleep(1);
	}
}

void	monitor_philosophers(t_data *data)
{
	int	i;

	while (1)
	{
		i = 0;
		while (i < data->num_philos)
		{
			if (did_anyone_die(data, i))
				return ;
			i++;
		}
		if (data->meals_needed > 0 && check_everyone_full(data))
			return ;
		usleep(500);
	}
	return ;
}

void	*thread_is_dead(void *arg)
{
	t_philo	*philo;

	philo = arg;
	monitor_philosophers(philo->data);
	return (0);
}

int	create_philo_threads(t_data *data)
{
	int	i;
	pthread_t is_dead_thread;

	i = 0;
	while (i < data->num_philos)
	{
		if (pthread_create(&data->philos[i].thread, \
NULL, philo_routine, &data->philos[i]) != 0)
		{
			printf("Error\n");
			return (1);
		}
		if (data->num_philos > 1)
			usleep(3);
		i++;
	}
	if (pthread_create(&is_dead_thread, NULL, thread_is_dead, data->philos) != 0)
	{
		printf("Error\n");
		return (1);
	}
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   creat_thread_helper.c                              :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: abdelhamid <abdelhamid@student.42.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/07/16 14:45:32 by abdelhamid        #+#    #+#             */
/*   Updated: 2025/07/20 13:07:23 by abdelhamid       ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

void	take_forks(t_philo *philo)
{
	if (philo->id % 2 == 0)
	{
		pthread_mutex_lock(philo->right_fork);
		print_action(philo, "has taken a fork");
		pthread_mutex_lock(philo->left_fork);
		print_action(philo, "has taken a fork");
	}
	else
	{
		pthread_mutex_lock(philo->left_fork);
		print_action(philo, "has taken a fork");
		pthread_mutex_lock(philo->right_fork);
		print_action(philo, "has taken a fork");
	}
}

void	philo_state(t_philo *philo)
{
	print_action(philo, "is eating");
	pthread_mutex_lock(&philo->data->print_mutex);
	philo->last_meal_time = get_current_time();
	philo->meals_eaten++;
	pthread_mutex_unlock(&philo->data->print_mutex);
	ft_usleep(philo->data->time_to_eat, philo->data);
	if (philo->id % 2 == 0)
	{
		pthread_mutex_unlock(philo->right_fork);
		pthread_mutex_unlock(philo->left_fork);
	}
	else
	{
		pthread_mutex_unlock(philo->left_fork);
		pthread_mutex_unlock(philo->right_fork);
	}
}

void	*philo_routine(void *arg)
{
	t_philo	*philo;
	t_data	*data;

	philo = (t_philo *)arg;
	data = philo->data;
	philo->last_meal_time = get_current_time();
	if (philo->id % 2)
		usleep(1);
	while (!data->someone_died)
	{
		take_forks(philo);
		philo_state(philo);
		if (data->someone_died)
			break ;
		if (data->meals_needed > 0 && philo->meals_eaten >= data->meals_needed)
			break ;
		print_action(philo, "is sleeping");
		ft_usleep(data->time_to_sleep, data);
		if (data->someone_died)
			break ;
		print_action(philo, "is thinking");
	}
	return (NULL);
}

int	did_anyone_die(t_data *data, int i)
{
	long	current_time;

	pthread_mutex_lock(&data->print_mutex);
	current_time = get_current_time();
	if ((current_time - data->philos[i].last_meal_time) >= data->time_to_die)
	{
		pthread_mutex_lock(&data->death_mutex);
		data->someone_died = 1;
		printf("%ld %d died\n", \
current_time - data->start_time, data->philos[i].id);
		pthread_mutex_unlock(&data->death_mutex);
		pthread_mutex_unlock(&data->print_mutex);
		return (1);
	}
	pthread_mutex_unlock(&data->print_mutex);
	return (0);
}

int	check_everyone_full(t_data *data)
{
	int	i;
	int	everyone_ate;

	everyone_ate = 1;
	pthread_mutex_lock(&data->print_mutex);
	i = 0;
	while (i < data->num_philos)
	{
		if (data->philos[i].meals_eaten < data->meals_needed)
		{
			everyone_ate = 0;
			break ;
		}
		i++;
	}
	if (everyone_ate)
	{
		pthread_mutex_lock(&data->death_mutex);
		data->someone_died = 1;
		pthread_mutex_unlock(&data->death_mutex);
		pthread_mutex_unlock(&data->print_mutex);
		return (1);
	}
	pthread_mutex_unlock(&data->print_mutex);
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   ft_utils.c                                         :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: abdelhamid <abdelhamid@student.42.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/07/15 09:11:44 by abdelhamid        #+#    #+#             */
/*   Updated: 2025/07/16 14:54:39 by abdelhamid       ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

long	ft_atol(const char *str)
{
	long	res;
	int		sign;
	int		i;

	res = 0;
	i = 0;
	sign = 1;
	while (str[i] == ' ' || (str[i] >= 9 && str[i] <= 13))
		i++;
	if (str[i] == '-' || str[i] == '+')
	{
		if (str[i] == '-')
			sign *= -1;
		i++;
	}
	while (str[i] >= '0' && str[i] <= '9')
	{
		res = res * 10 + (str[i] - '0');
		i++;
	}
	return (res * sign);
}

long	get_current_time(void)
{
	struct timeval	tv;
	long			time;

	gettimeofday(&tv, NULL);
	time = tv.tv_sec * 1000 + tv.tv_usec / 1000;
	return (time);
}

int	ft_strcmp(const char *s1, const char *s2)
{
	while ((*s1 || *s2))
	{
		if (*s1 != *s2)
			return ((unsigned char)*s1 - (unsigned char)*s2);
		s1++;
		s2++;
	}
	return (0);
}

int	is_digit(const char *s)
{
	int	i;

	if (!s || !*s)
		return (1);
	i = 0;
	while (s[i])
	{
		if (s[i] < '0' || s[i] > '9')
			return (1);
		i++;
	}
	return (0);
}

void	print_action(t_philo *philo, char *str)
{
	long	time;

	if (philo)
	{
		time = get_current_time() - philo->data->start_time;
		pthread_mutex_lock(&philo->data->print_mutex);
		pthread_mutex_lock(&philo->data->death_mutex);
		if (!philo->data->someone_died || ft_strcmp(str, "died") == 0)
			printf("%ld %d %s\n", time, philo->id, str);
		pthread_mutex_unlock(&philo->data->death_mutex);
		pthread_mutex_unlock(&philo->data->print_mutex);
	}
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   main.c                                             :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: abdelhamid <abdelhamid@student.42.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/07/15 08:57:32 by abdelhamid        #+#    #+#             */
/*   Updated: 2025/07/19 12:58:06 by abdelhamid       ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

void	destroy_mutexes(t_data *data)
{
	int	i;

	i = 0;
	while (i < data->num_philos)
	{
		pthread_mutex_destroy(&data->forks[i]);
		i++;
	}
	pthread_mutex_destroy(&data->print_mutex);
	pthread_mutex_destroy(&data->death_mutex);
}

void	cleanup(t_data *data)
{
	destroy_mutexes(data);
	free(data->philos);
	free(data->forks);
}

void	handle_single_philo(t_philo *philo)
{
	t_data	*data;

	data = philo->data;
	print_action(philo, "has taken a fork");
	ft_usleep(data->time_to_die, data);
	print_action(philo, "died");
}

void	start_philosophers(t_data *data)
{
	int	i;

	if (create_philo_threads(data))
	{
		cleanup(data);
		return ;
	}
	i = 0;
	while (i < data->num_philos)
	{
		if (pthread_join(data->philos[i].thread, NULL) != 0)
			printf("Error\n");
		i++;
	}
}

int	main(int ac, char **av)
{
	t_data	data;

	if (parse_args(ac, av, &data))
		return (1);
	if (data.num_philos == 1)
	{
		if (init_all(&data))
		{
			cleanup(&data);
			return (1);
		}
		handle_single_philo(&data.philos[0]);
		cleanup(&data);
		return (0);
	}
	if (init_all(&data) == 1)
	{
		cleanup(&data);
		return (1);
	}
	start_philosophers(&data);
	cleanup(&data);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   parsing.c                                          :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: abdelhamid <abdelhamid@student.42.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/07/15 12:28:45 by abdelhamid        #+#    #+#             */
/*   Updated: 2025/07/17 15:20:59 by abdelhamid       ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#include "philo.h"

int	is_valid_arg(char **av)
{
	int	i;

	i = 1;
	while (av[i])
	{
		if (is_digit(av[i]) == 1)
			return (1);
		i++;
	}
	return (0);
}

int	parse_args(int ac, char **av, t_data *data)
{
	if (ac < 5 || ac > 6)
		return (printf("Error\n"), 1);
	if (is_valid_arg(av) == 1)
		return (printf("Error\n"), 1);
	data->num_philos = ft_atol(av[1]);
	data->time_to_die = ft_atol(av[2]);
	data->time_to_eat = ft_atol(av[3]);
	data->time_to_sleep = ft_atol(av[4]);
	if (ac == 6)
		data->meals_needed = ft_atol(av[5]);
	else
		data->meals_needed = -1;
	if (data->num_philos <= 0 || data->time_to_die <= 0 || \
data->time_to_eat <= 0 || data->time_to_sleep <= 0 || \
(ac == 6 && data->meals_needed <= 0))
	{
		printf("Error: Invalid argument values\n");
		return (1);
	}
	return (0);
}

int	init_data(t_data *data)
{
	int	i;

	data->philos = malloc(sizeof(t_philo) * data->num_philos);
	if (!data->philos)
		return (printf("Error\n"), 1);
	data->forks = malloc(sizeof(pthread_mutex_t) * data->num_philos);
	if (!data->forks)
	{
		free(data->philos);
		return (printf("Error\n"), 1);
	}
	data->someone_died = 0;
	i = 0;
	while (i < data->num_philos)
	{
		data->philos[i].id = i + 1;
		data->philos[i].meals_eaten = 0;
		data->philos[i].last_meal_time = 0;
		data->philos[i].left_fork = &data->forks[i];
		data->philos[i].right_fork = &data->forks[(i + 1) % data->num_philos];
		data->philos[i].data = data;
		i++;
	}
	data->start_time = get_current_time();
	return (0);
}

int	init_mutexes(t_data *data)
{
	int	i;

	if (pthread_mutex_init(&data->print_mutex, NULL) != 0)
		return (printf("Error\n"), 1);
	if (pthread_mutex_init(&data->death_mutex, NULL) != 0)
	{
		pthread_mutex_destroy(&data->print_mutex);
		return (printf("Error\n"), 1);
	}
	i = 0;
	while (i < data->num_philos)
	{
		if (pthread_mutex_init(&data->forks[i], NULL) != 0)
		{
			while (--i >= 0)
				pthread_mutex_destroy(&data->forks[i]);
			pthread_mutex_destroy(&data->print_mutex);
			pthread_mutex_destroy(&data->death_mutex);
			return (printf("Error\n"), 1);
		}
		i++;
	}
	return (0);
}

int	init_all(t_data *data)
{
	if (init_data(data) == 1)
		return (1);
	if (init_mutexes(data) == 1)
	{
		free(data->philos);
		free(data->forks);
		return (1);
	}
	return (0);
}
/* ************************************************************************** */
/*                                                                            */
/*                                                        :::      ::::::::   */
/*   philo.h                                            :+:      :+:    :+:   */
/*                                                    +:+ +:+         +:+     */
/*   By: abdelhamid <abdelhamid@student.42.fr>      +#+  +:+       +#+        */
/*                                                +#+#+#+#+#+   +#+           */
/*   Created: 2025/07/16 15:07:52 by abdelhamid        #+#    #+#             */
/*   Updated: 2025/07/18 10:41:02 by abdelhamid       ###   ########.fr       */
/*                                                                            */
/* ************************************************************************** */

#ifndef PHILO_H
# define PHILO_H

# include <pthread.h>
# include <stdio.h>
# include <stdlib.h>
# include <sys/time.h>
# include <unistd.h>

typedef struct s_philo
{
	int				id;
	int				meals_eaten;
	long			last_meal_time;
	pthread_t		thread;
	pthread_mutex_t	*left_fork;
	pthread_mutex_t	*right_fork;
	struct s_data	*data;
}	t_philo;

typedef struct s_data
{
	int				num_philos;
	long			time_to_die;
	long			time_to_eat;
	long			time_to_sleep;
	int				meals_needed;
	long			start_time;
	pthread_mutex_t	*forks;
	pthread_mutex_t	print_mutex;
	pthread_mutex_t	death_mutex;
	int				someone_died;
	t_philo			*philos;
}	t_data;

int		is_digit(const char *s);
long	ft_atol(const char *str);
long	get_current_time(void);
void	print_action(t_philo *philo, char *action);
int		parse_args(int ac, char **av, t_data *data);
int		init_all(t_data *data);
void	ft_usleep(size_t time, t_data *data);
void	monitor_philosophers(t_data *data);
int		create_philo_threads(t_data *data);
void	*philo_routine(void *arg);
int		did_anyone_die(t_data *data, int i);
int		check_everyone_full(t_data *data);
#endif